public class Minesweeper {

    public static void main(String[] args) {
        // Prüfe, ob Feldgröße angegeben ist
        if (args.length < 2) {
            System.out.println("ERROR: Bitte Feldgröße angeben");
            return;
        }

        // Feldgröße einlesen
        int numberOfColumns = Integer.parseInt(args[0]);
        int numberOfRows = Integer.parseInt(args[1]);

        /*
         Q: Welcher Fehlerfall wird in den folgenden 6 Codezeilen behandelt?
         A:  Es wird in diesem Abschnitt überprüft, ob eine Übereinstimmung der Anzahl der gegebenen Spielfeldwerte 
         mit der erwarteten Anzahl an Feldern vorliegt. Wenn dies nicht übereinstimmt,
         wird eine Fehlermeldung erscheinen.
         */
        int expectedNumberOfFields = numberOfColumns * numberOfRows;
        int numberOfFieldsGiven = args.length - 2;
        if (expectedNumberOfFields != numberOfFieldsGiven) {
            System.out.println("ERROR: " + expectedNumberOfFields + " Felder erwartet, aber " + numberOfFieldsGiven + " angegeben.");
            return;
        }

        // Eingabe in 2D-Array einlesen
        int[][] mines = new int[numberOfRows][numberOfColumns];

        for (int columnNumber = 0; columnNumber < numberOfColumns; columnNumber++) {
            for (int rowNumber = 0; rowNumber < numberOfRows; rowNumber++) {
                // berechne den Index, an dem das Element für die entsprechende Zeile/Spalte ist
                int index = rowNumber * numberOfColumns + columnNumber + 2;
                mines[rowNumber][columnNumber] = Integer.parseInt(args[index]);
            }
        }

        // 8 mögliche Nachbarn für jedes Feld
        int[][] offsets = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};

        // 2D-Array für Nachbarschaftszahlen
        int[][] neighborhood = new int[numberOfRows][numberOfColumns];
        int mineCount = 0; // Zähler für die Anzahl der Minen

        // Betrachte jedes Feld im mines-Array
        for (int columnNumber = 0; columnNumber < numberOfColumns; columnNumber++) {
            for (int rowNumber = 0; rowNumber < numberOfRows; rowNumber++) {
                if (mines[rowNumber][columnNumber] == 1) {
                    // Mine gefunden, markiere mit -1 und erhöhe den Minenzähler
                    neighborhood[rowNumber][columnNumber] = -1;
                    mineCount++;
                } else {
                    int numberOfMinesInNeighborhood = 0;
                    // Überprüfe alle 8 benachbarten Felder
                    for (int[] offset: offsets) {
                        int column = columnNumber + offset[0];
                        int row = rowNumber + offset[1];
                        if (column >= 0 && column < numberOfColumns && row >= 0 && row < numberOfRows) {
                            // Zähle Minen in der Nachbarschaft
                            if (mines[row][column] == 1) {
                                numberOfMinesInNeighborhood += 1;
                            }
                        }
                    }
                    // speichere die Anzahl der Minen in der Nachbarschaft
                    neighborhood[rowNumber][columnNumber] = numberOfMinesInNeighborhood;
                }
            }
        }

        // gib das Ergebnis aus
        for (int[] row: neighborhood) {
            for (int number: row) {
                if (number == -1) {
                    System.out.print("* "); // Mine
                } else if (number == 0) {
                    System.out.print("  "); // Leeres Feld
                } else {
                    System.out.print(number + " "); // Anzahl der Minen in der Nachbarschaft
                }
            }
            // nach jeder Spielfeldzeile eine neue Zeile beginnen
            System.out.println();
        }

        // Ausgabe der Größe und der Anzahl der Minen
        System.out.println((numberOfRows * numberOfColumns) + " fields, " + mineCount + " mines");
    }
}
